/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import antgame.AntHill.Color;

/**
 *
 * @author sw386
 */
public class Ant_Brain{
    
    Cell cell;
    World world;
    Ant ant;
    Marker marker;
    AntHill anthill;

    public enum condition {

        Friend, Foe, FriendWithFood, FoeWithFood, Food, Rock, Marker, FoeMarker, Home, FoeHome
    }

    /**
     * @param args the command line arguments
     */
    public boolean cell_matches(Cell pos, condition cond, Color c) {
        if (world.rocky(pos)) {
            if (cond == condition.Rock) {

                return true;
            } else {
                return false;
            }  
        }else {
            switch (cond) {
                case Friend:
                    if (world.some_ant_is_at(pos) && (world.ant_at(pos).color) == c) {
                        return true;
                    } else {
                        return false;
                    }
                case Foe:
                    if (world.some_ant_is_at(pos) && (world.ant_at(pos).color) != c) {
                        return true;
                    } else {
                        return false;
                    }
                case FriendWithFood:
                    if (world.some_ant_is_at(pos) && (world.ant_at(pos).color) == c && (world.ant_at(pos).has_food)) {
                        return true;
                    } else {
                        return false;
                    }
                case FoeWithFood:
                    if (world.some_ant_is_at(pos) && (world.ant_at(pos).color) != c && (world.ant_at(pos).has_food)) {
                        return true;
                    } else {
                        return false;
                    }
                case Food:
                    if (world.food_at(pos) > 0) {
                        return true;
                    } else {
                        return false;
                    }
                case Rock:
                    return false;
                case Marker:
                    marker.set_marker_at(pos, c, marker);
                    return true;
                case FoeMarker:
                    marker.check_any_marker_at(pos, ant.other_color(c));
                    return true;
                case Home:
                    anthill= new AntHill(pos,c);
                    cell.set_anthill(anthill);
                    return true;
                case FoeHome:
                    anthill = new AntHill(pos, ant.other_color(c));
                    cell.set_anthill(anthill);
                    return true;
            }
        }

        return true;
    }

    public Instruction get_instruction(Color color, int state) {
        return null;
    }

    public int randomint(int n) {
        return 0;
    }
}
