package antgame;

import java.io.*;
import java.util.ArrayList;
import antgame.errors.InvalidSyntaxException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author team3
 */
public class AntBrainParser {

    Instruction instruction;
    Cond cond;
    Sense.Dir dir;
    Turn.Left_Right lr;
    AntBrain brain;
    ArrayList<Instruction> fsm;
    String pattern = "(Turn (Right|Left) \\d{1,4})|(Flip [1-9][0-9]* \\d{1,4} \\d{1,4})|(Sense (Here|Ahead|LeftAhead|RightAhead) \\d{1,4} \\d{1,4} (Friend(WithFood)?|Foe(WithFood|Marker|Home)?|Food|Rock|Marker [0-5]|Home))|(Mark [0-5] \\d{1,4})|(Unmark [0-5] \\d{1,4})|(PickUp \\d{1,4} \\d{1,4})|(Drop \\d{1,4})|(Move \\d{1,4} \\d{1,4})";

    /**
     * Constructor for AntBrainParser. Initializes the fsm field to a new ArrayList
     *
     * @throws FileNotFoundException
     * @throws InvalidSyntaxException
     */
    public AntBrainParser() throws FileNotFoundException, InvalidSyntaxException {
        fsm = new ArrayList<>();
    }

    /**
     *
     * @param args
     * @throws IOException
     * @throws FileNotFoundException
     * @throws InvalidSyntaxException
     */
    public static void main(String[] args) throws IOException, FileNotFoundException, InvalidSyntaxException {
        AntBrainParser abp = new AntBrainParser();
        abp.parseBrain("src/antgame/brains/brain1.txt");
        abp.printInstructions();
    }

    /**
     * Constructor of AntBrainParser. Reads a text file and calls for each line
     * of the document a parsing method and adds the returned instruction object
     * to the ArrayList of instructions that simulates the brain.
     *
     * @param pathName the path of the brain file to parse
     * @return An ArrayList of instructions representing the FSM
     * @throws FileNotFoundException
     * @throws IOException
     * @throws InvalidSyntaxException
     */
    public ArrayList<Instruction> parseBrain(String pathName) throws FileNotFoundException, IOException, InvalidSyntaxException {
        BufferedReader br = new BufferedReader(new FileReader(pathName));
        String line;
        while ((line = br.readLine()) != null) {
            parseLine(line);
            fsm.add(instruction);
        }
        return fsm;
    }

    /**
     * Parsing method. Parses a line of text in a instruction object storing the
     * arguments of each line of the brain file.
     *
     * @param line
     * @throws java.io.IOException
     * @throws antgame.errors.InvalidSyntaxException
     */
    public void parseLine(String line) throws IOException, InvalidSyntaxException {
        int i;
        int st;
        int st1;
        int st2;
        int p;

//        if (line.matches(pattern)) {
        syntaxCheck(line);
        String[] row = line.split(" ");
        for (int j = 0; j < row.length; j++) {
            switch (row[0]) {
                case "Sense":
                    switch (row[1]) {
                        case "Here":
                            dir = Sense.Dir.HERE;
                            break;
                        case "Ahead":
                            dir = Sense.Dir.AHEAD;
                            break;
                        case "LeftAhead":
                            dir = Sense.Dir.LEFTAHEAD;
                            break;
                        case "RightAhead":
                            dir = Sense.Dir.RIGHTAHEAD;
                            break;
                    }
                    st1 = Integer.parseInt(row[2]);
                    st2 = Integer.parseInt(row[3]);

                    switch (row[4]) {
                        case "Friend":
                            cond = new Friend();
                            break;
                        case "Foe":
                            cond = new Foe();
                            break;
                        case "FriendWithFood":
                            cond = new FriendWithFood();
                            break;
                        case "Food":
                            cond = new Food();
                            break;
                        case "Rock":
                            cond = new Rock();
                            break;
                        case "Marker":
                            cond = new Marker(Integer.parseInt(row[5]));
                            break;
                        case "Home":
                            cond = new Home();
                            break;
                        case "FoeHome":
                            cond = new FoeHome();
                            break;
                    }
                    instruction = new Sense(dir, st1, st2, cond);
                    break;
                case "Mark":
                    i = Integer.parseInt(row[1]);
                    st = Integer.parseInt(row[2]);
                    instruction = new Mark(i, st);
                    break;
                case "Unmark":
                    i = Integer.parseInt(row[1]);
                    st = Integer.parseInt(row[2]);
                    instruction = new Unmark(i, st);
                    break;
                case "PickUp":
                    st1 = Integer.parseInt(row[1]);
                    st2 = Integer.parseInt(row[2]);
                    instruction = new PickUp(st1, st2);
                    break;
                case "Drop":
                    st = Integer.parseInt(row[1]);
                    instruction = new Drop(st);
                    break;
                case "Turn":
                    st = Integer.parseInt(row[2]);
                    if (row[1].equals("Right")) {
                        lr = Turn.Left_Right.RIGHT;
                    } else {
                        lr = Turn.Left_Right.LEFT;
                    }
                    instruction = new Turn(lr, st);
                    break;
                case "Move":
                    st1 = Integer.parseInt(row[1]);
                    st2 = Integer.parseInt(row[2]);
                    instruction = new Move(st1, st2);
                    break;
                case "Flip":
                    p = Integer.parseInt(row[1]);
                    st1 = Integer.parseInt(row[2]);
                    st2 = Integer.parseInt(row[3]);
                    instruction = new Flip(p, st1, st2);
                    break;
            }
        }
    }

    /**
     * Checks whether the line passed as parameter is syntactically correct by comparing it
     * to the regular expression pattern.
     *
     * @param line the line to be checked
     * @throws InvalidSyntaxException
     */
    public void syntaxCheck(String line) throws InvalidSyntaxException {
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(line);
        boolean matches = m.matches();
        if (!matches) {
            throw new InvalidSyntaxException("Invalid Syntax");
        }
    }

    /**
     *
     */
    public void printInstructions() {
        for (Instruction i : fsm) {
            System.out.println(i.toString());
        }
    }
}
