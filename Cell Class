package antgame;

/**
 *
 * @author team3
 */
public class Cell {

    private final int x;
    private final int y;
    private boolean antAtCell;
    private boolean hillAtCell;
    private boolean isRocky;
    private Ant ant;
    private int amountOfFood;
    private AntHill antHill;
    private boolean markerAtCell;
    private int[] redMarker;
    private int[] blackMarker;

    /**
     *
     * @param x
     * @param y
     */
    public Cell(int x, int y) {
        this.x = x;
        this.y = y;
        antAtCell = false;
        hillAtCell = false;
        isRocky = false;
        amountOfFood = 0;
    }

    /**
     *
     * @return
     */
    public int getX() {
        return x;
    }

    /**
     *
     * @return
     */
    public int getY() {
        return y;
    }

    /**
     *
     * @return
     */
    public boolean hasAnt() {
        return antAtCell;
    }

    /**
     *
     * @param a
     */
    public void setAnt(Ant a) {
        ant = a;
        antAtCell = true;
        //Consider whether we need to store the ant inside the cell class

    }

    /**
     *
     * @return
     */
    public Ant getAnt() {
        return ant;
    }

    /**
     *
     * @return
     */
    public int getAmountOfFood() {
        return amountOfFood;
    }

    /**
     *
     * @param food
     */
    public void set_food(int food) {
        if (!isRocky) {
            amountOfFood += food;
        }
    }

    /**
     *
     * @param ah
     */
    public void set_anthill(AntHill ah) {
        if (!isRocky) {
            antHill = ah;
            hillAtCell = true;
            antAtCell = true;
        }
    }

    /**
     *
     * @return
     */
    public boolean has_anthill() {
        return hillAtCell;
    }

    /**
     *
     * @return
     */
    public AntHill getAntHill() {
        return antHill;
    }

    /**
     *
     * @return
     */
    public int[] getRedMarker() {
        return redMarker;
    }

    /**
     *
     * @return
     */
    public int[] getBlackMarker() {
        return blackMarker;
    }

    /**
     *
     */
    public void setRocky() {
        isRocky = true;
    }

    /**
     *
     * @return
     */
    public boolean isRocky() {
        return isRocky;
    }

    /**
     *
     */
    public void clearAnt() {
        ant = null;
        antAtCell = false;
        amountOfFood += 3;
    }

    /**
     *
     * @param c
     * @param i
     */
    public void set_marker_at(Color c, int i) {
        switch (c) {
            case RED:
                redMarker[i] = 1;
                break;
            case BLACK:
                blackMarker[i] = 1;
                break;
        }
        markerAtCell = true;
    }

    /**
     *
     * @param c
     * @param i
     */
    public void clear_marker_at(Color c, int i) {
        switch (c) {
            case RED:
                redMarker[i] = -1;
                break;
            case BLACK:
                blackMarker[i] = -1;
                break;
        }
    }

    /**
     *
     * @param c
     * @param i
     * @return
     */
    public boolean check_marker_at(Color c, int i) {
        switch (c) {
            case RED:
                if (redMarker[i] == 1) {
                    return true;
                }
                break;
            case BLACK:
                if (blackMarker[i] == 1) {
                    return true;
                }
                break;
        }
        return false;
    }

    /**
     *
     * @param c
     * @return
     */
    public boolean check_any_marker_at(Color c) {
        boolean found = false;
        switch (c) {
            case RED:
                for (int i = 0; i < redMarker.length; i++) {
                    if (redMarker[i] == 1) {
                        found = true;
                    }
                }
                break;

            case BLACK:
                for (int i = 0; i < blackMarker.length; i++) {
                    if (blackMarker[i] == 1) {
                        found = true;
                    }
                }
                break;
        }
        return found;
    }
}
