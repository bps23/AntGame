/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import antgame.Ant.Color;

/**
 *
 * @author ap487
 */
public class Cell {

    private final int x;
    private final int y;
    private boolean antAtCell;
    private boolean hillAtCell;
    private boolean isRocky;
    private Ant ant;
    private int amountOfFood;
    private AntHill antHill;
    private final Marker[] redMarker = new Marker[5];
    private final Marker[] blackMarker = new Marker[5];

    public Cell(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public boolean hasAnt() {
        return antAtCell;
    }

    public void setAnt(Ant a) {
        ant = a;
        antAtCell = true;
        //Consider whether we need to store the ant inside the cell class

    }

    public Ant getAnt() {
        return ant;
    }

    public int getAmountOfFood() {
        return amountOfFood;
    }

    public void set_food(int food) {
        amountOfFood += food;
    }

    public void set_anthill(AntHill ah) {
        antHill = ah;
        hillAtCell = true;
    }

    public boolean has_anthill() {
        return hillAtCell;
    }

    public AntHill getAntHill() {
        return antHill;
    }
    
    public void setRocky(){
        isRocky = true;
    }
    
    public boolean isRocky(){
        return isRocky;
    }

    public void clearAnt() {
        ant = null;
        antAtCell = false;
        amountOfFood += 3;
    }
    
    public void set_marker_at(Color c, Marker i)
    {
        switch(c){
            case RED:
                redMarker[i.getType()] = i;
                break;
            case BLACK:
                blackMarker[i.getType()] = i;
                break;
        }
    }
    
    public void clear_marker_at(Color c, Marker i)
    {
        switch(c){
            case RED:
                redMarker[i.getType()] = null;
                break;
            case BLACK:
                blackMarker[i.getType()] = null;
                break;
        }
    }
    
    public boolean check_marker_at(Color c, Marker i)
    {
        switch(c){
            case RED:
                if(redMarker[i.getType()] != null)
                    return true;
                break;
            case BLACK:
                if(blackMarker[i.getType()] != null)
                    return true;
                break;        
        }
        return false;
    }
    
    public boolean check_any_marker_at(Color c)
    {
        int i = 0;
        boolean found = false;
        switch(c){
            
            case RED:
                while(!found && i < 6){
                    if(redMarker[i] != null)
                        found = true;
                    i++;
                }
                break;
                
            case BLACK:
                while(!found && i < 6){
                    if(blackMarker[i] != null)
                        found = true;
                    i++;
                }
                break;        
        }
        return found;
    }
}
