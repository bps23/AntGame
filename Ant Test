/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Jason
 */
public class AntTest {

    public AntTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of other_color method, of class Ant.
     */
    @Test
    public void testOther_color() {
        System.out.println("other_color");
        Color c = Color.RED;
        Cell pos = new Cell(0, 1);        
        Color expResult = Color.BLACK;
        Color result = c.other_color(c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_state method, of class Ant.
     */
    @Test
    public void testSet_state() {
        System.out.println("set_state");
        Cell pos = new Cell(0, 1);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant a = new Ant(w, pos,c);
        int s = 0;
        a.set_state(a, s);
        int result = a.state(a);
        assertEquals(s, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_resting method, of class Ant.
     */
    @Test
    public void testSet_resting() {
        System.out.println("set_resting");
        Cell pos = new Cell(0, 1);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant a = new Ant(w, pos,c);
        int r = 0;
        a.set_resting(a, r);
        int result = a.resting(a);
        assertEquals(r, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_direction method, of class Ant.
     */
    @Test
    public void testSet_direction() {
        System.out.println("set_direction");
        Cell pos = new Cell(0, 1);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant a = new Ant(w, pos,c);
        int d = 0;
        a.set_direction(a, d);
        int result = a.direction(a);
        assertEquals(d, result);

        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_has_food method, of class Ant.
     */
    @Test
    public void testSet_has_food() {
        System.out.println("set_has_food");
        Cell pos = new Cell(0, 1);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant a = new Ant(w, pos,c);
        boolean b = false;
        a.set_has_food(a, b);
        boolean result = a.has_food(a);
        assertEquals(b, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of adjacent_ants method, of class Ant.
     */
    @Test
    public void testAdjacent_ants() {
        System.out.println("adjacent_ants");
        Cell p = new Cell(1, 1);
        Cell pos = new Cell(0, 1);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant a = new Ant(w, pos,c);
        Ant instance = new Ant(w, p,c);
        int expResult = 0;
        int result = instance.adjacent_ants(p, c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of check_for_surrounded_ant_at method, of class Ant.
     */
    @Test
    public void testCheck_for_surrounded_ant_at() {
        System.out.println("check_for_surrounded_ant_at");
        Cell p = new Cell(5, 5);
        Cell pos = new Cell(5, 6);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant instance = new Ant(w, p,c);
        instance.check_for_surrounded_ant_at(p);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of check_for_surrounded_ants method, of class Ant.
     */
    @Test
    public void testCheck_for_surrounded_ants() {
        System.out.println("check_for_surrounded_ants");
        Cell p = new Cell(1, 1);
        Cell pos = new Cell(1, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant a = new Ant(w, p,c);       
        Ant instance = new Ant(w, pos,c);
        instance.check_for_surrounded_ants(pos);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of getCell method, of class Ant.
     */
    @Test
    public void testGetCell() {
        System.out.println("getCell");
        Cell p = new Cell(0, 0);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);   
        AntHill instance = new AntHill(w, p, c);        
        Cell result = instance.getCell();
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(p, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of getId method, of class Ant.
     */
    @Test
    public void testGetId() {
        System.out.println("getId");
        Cell p = new Cell(0, 0);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World w = new World(customWorld);
        Ant instance = new Ant(w,p,c);
        int expResult = 0;
        int result = instance.getId();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

}
