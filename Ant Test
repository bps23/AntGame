/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import antgame.AntHill.Color;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Jason
 */
public class AntTest {

    public AntTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of other_color method, of class Ant.
     */
    @Test
    public void testOther_color() {
        System.out.println("other_color");
        AntHill.Color c = Color.RED;
        Cell pos = new Cell(0, 1);
        World w = new World();
        Ant instance = new Ant(w, pos);
        AntHill.Color expResult = Color.BLACK;
        AntHill.Color result = instance.other_color(c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_state method, of class Ant.
     */
    @Test
    public void testSet_state() {
        System.out.println("set_state");
        Cell pos = new Cell(0, 1);
        World w = new World();
        Ant a = new Ant(w, pos);
        int s = 0;
        a.set_state(a, s);
        int result = a.state(a);
        assertEquals(s, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_resting method, of class Ant.
     */
    @Test
    public void testSet_resting() {
        System.out.println("set_resting");
        Cell pos = new Cell(0, 1);
        World w = new World();
        Ant a = new Ant(w, pos);
        int r = 0;
        a.set_resting(a, r);
        int result = a.resting(a);
        assertEquals(r, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_direction method, of class Ant.
     */
    @Test
    public void testSet_direction() {
        System.out.println("set_direction");
        Cell pos = new Cell(0, 1);
        World w = new World();
        Ant a = new Ant(w, pos);
        int d = 0;
        a.set_direction(a, d);
        int result = a.direction(a);
        assertEquals(d, result);

        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_has_food method, of class Ant.
     */
    @Test
    public void testSet_has_food() {
        System.out.println("set_has_food");
        Cell pos = new Cell(0, 1);
        World w = new World();
        Ant a = new Ant(w, pos);
        boolean b = false;
        a.set_has_food(a, b);
        boolean result = a.has_food(a);
        assertEquals(b, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of adjacent_ants method, of class Ant.
     */
    @Test
    public void testAdjacent_ants() {
        System.out.println("adjacent_ants");
        Cell p = new Cell(0, 0);
        Cell pos = new Cell(0, 1);
        World w = new World();
        AntHill.Color c = Color.RED;
        Ant instance = new Ant(w, p);
        Ant a = new Ant(w, pos);
        int expResult = 0;
        int result = instance.adjacent_ants(p, c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of check_for_surrounded_ant_at method, of class Ant.
     */
    @Test
    public void testCheck_for_surrounded_ant_at() {
        System.out.println("check_for_surrounded_ant_at");
        Cell p = new Cell(0, 0);
        Cell pos = new Cell(0, 1);
        World w = new World();
        AntHill.Color c = Color.RED;
        Ant instance = new Ant(w, p);
        Ant a = new Ant(w, pos);
        instance.check_for_surrounded_ant_at(p);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of check_for_surrounded_ants method, of class Ant.
     */
    @Test
    public void testCheck_for_surrounded_ants() {
        System.out.println("check_for_surrounded_ants");
        Cell p = new Cell(0, 0);
        Cell pos = new Cell(0, 1);
        World w = new World();        
        Ant instance = new Ant(w, p);
        Ant a = new Ant(w, pos);
        instance.check_for_surrounded_ants(p);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of getCell method, of class Ant.
     */
    @Test
    public void testGetCell() {
        System.out.println("getCell");
        Cell p = new Cell(0, 0);
        World w = new World();        
        Ant instance = new Ant(w, p);        
        Cell result = instance.getCell();
        assertEquals(p, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of getId method, of class Ant.
     */
    @Test
    public void testGetId() {
        System.out.println("getId");
        Cell p = new Cell(0, 0);
        World w = new World(); 
        Ant instance = new Ant(w,p);
        int expResult = 0;
        int result = instance.getId();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

}
