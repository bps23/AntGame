package antgame;

/**
 *
 * @author team3
 */
public class Ant {

    Color color;
    int id;
    int state;
    int resting; //keeps track of how long the ant has to rest after its last move before any other action.
    int direction;
    boolean has_food;
    Cell cell;
    World w;

    /**
     *
     * @param w
     * @param cell
     * @param c
     */
    public Ant(World w, Cell cell, Color c) {
        this.w = w;
        this.cell = cell;
        color = c;

    }

    /**
     *
     * @param a
     * @return
     */
    public int state(Ant a) {
        return state;
    }

    /**
     *
     * @param a
     * @return
     */
    public Color color(Ant a) {
        return color;
    }

    /**
     *
     * @param a
     * @return
     */
    public int resting(Ant a) {
        return resting;
    }

    /**
     *
     * @param a
     * @return
     */
    public int direction(Ant a) {
        return direction;
    }

    /**
     *
     * @param a
     * @return
     */
    public boolean has_food(Ant a) {
        return has_food;
    }

    /**
     *
     * @param a
     * @param s
     */
    public void set_state(Ant a, int s) {
        state = s;
    }

    /**
     *
     * @param a
     * @param r
     */
    public void set_resting(Ant a, int r) {
        resting = r;
    }

    /**
     *
     * @param a
     * @param d
     */
    public void set_direction(Ant a, int d) {
        if (d > 0 && d < 7) {
            direction = d;
        } else {
            System.out.println("Can't set direction"); //Consider throwing an exception
        }
    }

    /**
     *
     * @param a
     * @param b
     */
    public void set_has_food(Ant a, boolean b) {
        has_food = b;
    }

    /**
     *
     * @param p
     * @param c
     * @return
     */
    public int adjacent_ants(Cell p, Color c) {
        int n = 0;
        for (int d = 0; d < 6; d++) {
            Cell cel = w.adjacent_cell(p, d);
            if (w.some_ant_is_at(cel) && (w.ant_at(cel)).color == c) {
                n++;
            }
        }
        return n;
    }

    /**
     *
     * @param p
     */
    public void check_for_surrounded_ant_at(Cell p) {
        int i;
        if (w.some_ant_is_at(p)) {
            Ant a = w.ant_at(p);
            if (adjacent_ants(p, color.other_color(color)) >= 5) {
                w.kill_ant_at(p);
                if (has_food(a)) {
                    i = 1;
                } else {
                    i = 0;
                }
                w.set_food_at(p, w.food_at(p) + 3 + i);
            }

        }
    }

    /**
     *
     * @param p
     */
    public void check_for_surrounded_ants(Cell p) {
        check_for_surrounded_ant_at(p);
        for (int d = 0; d < 6; d++) {
            check_for_surrounded_ant_at(w.adjacent_cell(p, d));
        }
    }

    /**
     *
     * @return
     */
    public Cell getCell() {
        return cell;
    }

    /**
     *
     * @return
     */
    public int getId() {
        return id;
    }

    /**
     *
     * @return
     */
    public int getDirection() {
        return direction;
    }
    

    /**
     *
     * @param color
     */
    public void setColor(Color color) {
        this.color = color;
    }

    /**
     *
     * @param color
     * @param state
     * @return The instruction of the right brain at the given state
     */


}
