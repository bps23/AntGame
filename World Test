/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Jason
 */
public class WorldTest {

    public WorldTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of main method, of class World.
     */
    @Test
    public void testMain() {
//        System.out.println("main");
//        String[] args = null;
//        World.main(args);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of step method, of class World.
     */
    @Test
    public void testStep() {
        System.out.println("step");
        int id = 0;
        World instance = null;
        instance.step(id);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testCell_matches() {
        System.out.println("cell_matches");
        Cell pos = new Cell(2,1);
        Cond cond = new Foe();
        Color c = new Red();
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        boolean expResult = false;
        boolean result = instance.cell_matches(pos, cond, c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of adjacent_cell method, of class World.
     */
    @Test
    public void testAdjacent_cell() {
        System.out.println("adjacent_cell");
        Cell p = new Cell(1, 1);
        int d = 0;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        Cell expResult = new Cell(2, 1);
        Cell result = instance.adjacent_cell(p, d);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of turn method, of class World.
     */
    @Test
    public void testLeftTurn() {
        System.out.println("Left turn");
        Turn.Left_Right lr = Turn.Left_Right.LEFT;
        int d = 2;
         Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        int expResult = 1;
        int result = instance.turn(lr, d);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }
    
    
        /**
     * Test of turn method, of class World.
     */
    @Test
    public void testRightTurn() {
        System.out.println("Right turn");
        Turn.Left_Right lr = Turn.Left_Right.RIGHT;
        int d = 2;
         Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        int expResult = 3;
        int result = instance.turn(lr, d);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testHeadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2,2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.HERE;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        Cell expResult = p;
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }
    
    
        /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testAheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2,2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.AHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        Cell expResult = new Cell(3,2);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }
    
    
        /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testLeftaheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2,2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.LEFTAHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        Cell expResult = new Cell(2,1);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }
    
    
        /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testRightaheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2,2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.RIGHTAHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld);
        Cell expResult = new Cell(2,3);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of randomint method, of class World.
     */
    @Test
    public void testRandomint() {
        System.out.println("randomint");
        int n = 0;
        World instance = null;
        int expResult = 0;
        int result = instance.randomint(n);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of rocky method, of class World.
     */
    @Test
    public void testRocky() {
        System.out.println("rocky");
        Cell p = null;
        World instance = null;
        boolean expResult = false;
        boolean result = instance.rocky(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of some_ant_is_at method, of class World.
     */
    @Test
    public void testSome_ant_is_at() {
        System.out.println("some_ant_is_at");
        Cell p = null;
        World instance = null;
        boolean expResult = false;
        boolean result = instance.some_ant_is_at(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of ant_at method, of class World.
     */
    @Test
    public void testAnt_at() {
        System.out.println("ant_at");
        Cell p = null;
        World instance = null;
        Ant expResult = null;
        Ant result = instance.ant_at(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of set_ant_at method, of class World.
     */
    @Test
    public void testSet_ant_at() {
        System.out.println("set_ant_at");
        Cell p = null;
        Ant a = null;
        World instance = null;
        instance.set_ant_at(p, a);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of clear_ant_at method, of class World.
     */
    @Test
    public void testClear_ant_at() {
        System.out.println("clear_ant_at");
        Cell p = null;
        World instance = null;
        instance.clear_ant_at(p);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of ant_is_alive method, of class World.
     */
    @Test
    public void testAnt_is_alive() {
        System.out.println("ant_is_alive");
        int id = 0;
        World instance = null;
        boolean expResult = false;
        boolean result = instance.ant_is_alive(id);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of find_ant method, of class World.
     */
    @Test
    public void testFind_ant() {
        System.out.println("find_ant");
        int id = 0;
        World instance = null;
        Cell expResult = null;
        Cell result = instance.find_ant(id);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of kill_ant_at method, of class World.
     */
    @Test
    public void testKill_ant_at() {
        System.out.println("kill_ant_at");
        Cell p = null;
        World instance = null;
        instance.kill_ant_at(p);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of food_at method, of class World.
     */
    @Test
    public void testFood_at() {
        System.out.println("food_at");
        Cell p = null;
        World instance = null;
        int expResult = 0;
        int result = instance.food_at(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of set_food_at method, of class World.
     */
    @Test
    public void testSet_food_at() {
        System.out.println("set_food_at");
        Cell p = null;
        int f = 0;
        World instance = null;
        instance.set_food_at(p, f);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of anthill_at method, of class World.
     */
    @Test
    public void testAnthill_at() {
        System.out.println("anthill_at");
        Cell p = null;
        Color c = null;
        World instance = null;
        boolean expResult = false;
        boolean result = instance.anthill_at(p, c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of set_marker_at method, of class World.
     */
    @Test
    public void testSet_marker_at() {
        System.out.println("set_marker_at");
        Cell p = null;
        Color c = null;
        int i = 0;
        World instance = null;
        instance.set_marker_at(p, c, i);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of clear_marker_at method, of class World.
     */
    @Test
    public void testClear_marker_at() {
        System.out.println("clear_marker_at");
        Cell p = null;
        Color c = null;
        int i = 0;
        World instance = null;
        instance.clear_marker_at(p, c, i);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of check_marker_at method, of class World.
     */
    @Test
    public void testCheck_marker_at() {
        System.out.println("check_marker_at");
        Cell p = null;
        Color c = null;
        int i = 0;
        World instance = null;
        boolean expResult = false;
        boolean result = instance.check_marker_at(p, c, i);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of check_any_marker_at method, of class World.
     */
    @Test
    public void testCheck_any_marker_at() {
        System.out.println("check_any_marker_at");
        Cell p = null;
        Color c = null;
        World instance = null;
        boolean expResult = false;
        boolean result = instance.check_any_marker_at(p, c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of printWorld method, of class World.
     */
    @Test
    public void testPrintWorld() {
        System.out.println("printWorld");
        World instance = null;
        instance.printWorld();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
}
