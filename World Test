/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import antgame.Turn.Left_Right;
import java.util.ArrayList;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Jason
 */
public class WorldTest {

    ArrayList<Ant> ant = new ArrayList<>();

    public WorldTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of step method, of class World.
     */
    @Test
    public void testSenseStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);
        pos.setAnt(a);
        instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new Sense(Sense.Dir.HERE, 3, 4, cond));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 3;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of step method, of class World.
     */
    @Test
    public void testPickupStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);

        pos.setAnt(a);
        instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new PickUp(1, 3));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 3;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of step method, of class World.
     */
    @Test
    public void testDropStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);

        pos.setAnt(a);
        instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new Drop(1));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 1;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of step method, of class World.
     */
    @Test
    public void testTurnStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);

        pos.setAnt(a);
        instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        Left_Right lr = Left_Right.LEFT;
        instruction.add(new Turn(lr, 1));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 1;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    public void testMarkStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);
        pos.setAnt(a);
        //instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new Mark(5, 2));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 2;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    public void testMoveStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);
        pos.setAnt(a);
        //instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new Move(5, 2));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 2;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }
    
    
    
    
        public void testFlipStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);
        pos.setAnt(a);
        //instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new Flip(1,2,3));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 3;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    public void testUnMarkStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.setId(id);
        a.set_resting(a, 0);
        pos.setAnt(a);
        //instance.addAnt(a);
        ArrayList<Instruction> instruction;
        instruction = new ArrayList<>();
        instruction.add(new Unmark(5, 2));
        AntBrain ab = new AntBrain(instruction);
        instance.setRedBrain(ab.getInstructions());
        instance.step(id);
        int expect = 2;
        int result = a.state;
        assertEquals(expect, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFoodCell_matches() {
        System.out.println("Food_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Food();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        pos.set_food(5);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    @Test
    public void testRockCell_matches() {
        System.out.println("Rock_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Rock();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        pos.setRocky();
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        System.out.println(result);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFriendsCell_matches() {
        System.out.println("Friends_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFoeCell_matches() {
        System.out.println("Foe_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Foe();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFoeWithFoodCell_matches() {
        System.out.println("FoeWithFood_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new FoeWithFood();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.set_has_food(a, true);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFriendWithFoodCell_matches() {
        System.out.println("Friends_with_food_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.set_has_food(a, true);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testMarkCell_matches() {
        System.out.println("Mark_cell_matches");
        Cell pos = new Cell(2, 1);
        int x = 0;
        Cond cond = new Marker(x);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        pos.set_marker_at(c, x);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFoeMarkCell_matches() {
        System.out.println("Foe_Mark_cell_matches");
        Cell pos = new Cell(2, 1);
        int x = 0;
        Cond cond = new FoeMarker();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(pos, c, x);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testHomeCell_matches() {
        System.out.println("Home_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Home();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        AntHill a = new AntHill(instance, pos, c);
        pos.set_anthill(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of cell_matches method, of class World.
     */
    @Test
    public void testFoeHomeCell_matches() {
        System.out.println("Foe_Home_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new FoeHome();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        AntHill a = new AntHill(instance, pos, c);
        pos.set_anthill(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of adjacent_cell method, of class World.
     */
    @Test
    public void testAdjacent_cell() {
        System.out.println("adjacent_cell");
        Cell p = new Cell(1, 1);
        int d = 0;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(2, 1);
        Cell result = instance.adjacent_cell(p, d);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of turn method, of class World.
     */
    @Test
    public void testLeftTurn() {
        System.out.println("Left turn");
        Turn.Left_Right lr = Turn.Left_Right.LEFT;
        int d = 2;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        int expResult = 1;
        int result = instance.turn(lr, d);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of turn method, of class World.
     */
    @Test
    public void testRightTurn() {
        System.out.println("Right turn");
        Turn.Left_Right lr = Turn.Left_Right.RIGHT;
        int d = 2;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        int expResult = 3;
        int result = instance.turn(lr, d);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testHeadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.HERE;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = p;
        Cell result = instance.sensed_cell(p, d, sd);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testAheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.AHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(3, 2);
        Cell result = instance.sensed_cell(p, d, sd);
//        System.out.println(result.getX());
        //        System.out.println("----------------------------------------------");
//        System.out.println(result.getY());        
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testLeftaheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.LEFTAHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(2, 1);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of sensed_cell method, of class World.
     */
    @Test
    public void testRightaheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.RIGHTAHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(2, 3);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of rocky method, of class World.
     */
    @Test
    public void testRocky() {
        System.out.println("rocky");
        Cell p = new Cell(2, 3);
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        p.setRocky();
        boolean expResult = true;
        boolean result = instance.rocky(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of some_ant_is_at method, of class World.
     */
    @Test
    public void testSome_ant_is_at() {
        System.out.println("some_ant_is_at");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        p.setAnt(a);
        boolean expResult = true;
        boolean result = instance.some_ant_is_at(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of ant_at method, of class World.
     */
    @Test
    public void testAnt_at() {
        System.out.println("ant_at");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        instance.set_ant_at(p, a);
        Ant expResult = a;
        Ant result = instance.ant_at(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of clear_ant_at method, of class World.
     */
    @Test
    public void testClear_ant_at() {
        System.out.println("clear_ant_at");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        instance.set_ant_at(p, a);
        instance.clear_ant_at(p);
        Ant expResult = null;
        Ant result = instance.ant_at(p);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of ant_is_alive method, of class World.
     */
    @Test
    public void testAnt_is_alive() {
        System.out.println("ant_is_alive");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        int id = 0;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        instance.addAnt(a);
        a.setId(id);
        boolean expResult = true;
        boolean result = instance.ant_is_alive(id);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of find_ant method, of class World.
     */
    @Test
    public void testFind_ant() {
        System.out.println("find_ant");
        int id = 0;
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        instance.addAnt(a);
        a.setId(id);
        Cell expResult = p;
        Cell result = instance.find_ant(id);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of food_at method, of class World.
     */
    @Test
    public void testFood_at() {
        System.out.println("food_at");
        Cell p = new Cell(3, 3);
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_food_at(p, 5);
        int expResult = 5;
        int result = instance.food_at(p);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of anthill_at method, of class World.
     */
    @Test
    public void testAnthill_at() {
        System.out.println("anthill_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        AntHill a = new AntHill(instance, p, c);
        boolean expResult = true;
        boolean result = instance.anthill_at(p, c);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of set_marker_at method, of class World.
     */
    @Test
    public void testSet_marker_at() {
        System.out.println("set_marker_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        int z = 3;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(p, c, z);
        boolean result = instance.check_marker_at(p, c, z);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of clear_marker_at method, of class World.
     */
    @Test
    public void testClear_marker_at() {
        System.out.println("clear_marker_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        int z = 3;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(p, c, z);
        instance.clear_marker_at(p, c, z);
        boolean result = instance.check_marker_at(p, c, z);
        assertFalse(result);
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test of check_any_marker_at method, of class World.
     */
    @Test
    public void testCheck_any_marker_at() {
        System.out.println("check_any_marker_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        int z = 3;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(p, c, z);
        boolean result = instance.check_any_marker_at(p, c);
        assertTrue(result);
        // TODO review the generated test code and remove the default call to fail.
    }
}
