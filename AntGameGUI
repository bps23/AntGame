/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Alex
 */
public class AntGameGUI {

    public static void main(String[] args) {
        AntGameGUI gui = new AntGameGUI();
        gui.go();
    }

    JFrame gameFrame;
    JFrame welcomeFrame;
    JPanel contentPane;
    JPanel topPanel;
    JPanel rightPanel;
    JPanel centerPanel;
    JPanel leftPanel;
    JPanel bottomPanel;
    JLabel infoLabel;
    JButton playButton;
    JButton pauseButton;
    JMenuBar menuBar;
    JMenuItem newItem;
    JMenuItem loadItem;
    JMenuItem mainItem;
    JMenuItem rulesItem;
    JMenuItem creditsItem;
    boolean normalGame;
    boolean contestGame;

    public AntGameGUI() {
    }

    private void go() {
        welcomeFrame = new JFrame("The Ant Game");

        Container welcomeContentPane = welcomeFrame.getContentPane();

        JPanel welcomeTop = new JPanel();
        welcomeContentPane.add(welcomeTop, BorderLayout.NORTH);
        JLabel welcomeLabel = new JLabel("WELCOME");
        welcomeLabel.setFont(new Font("Calibri", Font.PLAIN, 32));
        welcomeLabel.setForeground(Color.RED);
        welcomeTop.add(welcomeLabel);

        JPanel welcomeCenter = new JPanel();
        welcomeContentPane.add(welcomeCenter, BorderLayout.CENTER);
//        welcomeCenter.add(new JLabel(new ImageIcon("resources/ant.jpg")));

        JPanel welcomeBottom = new JPanel();
        welcomeContentPane.add(welcomeBottom, BorderLayout.SOUTH);
        welcomeBottom.setLayout(new FlowLayout());

        JButton start = new JButton("Normal");
        start.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                normalGame = true;
                contestGame = false;
                welcomeFrame.dispose();
                setup();
                gameFrame.setVisible(true);
            }
        });

        JButton contest = new JButton("Contest");
        contest.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                contestGame = true;
                normalGame = false;
                welcomeFrame.dispose();
                setup();
                gameFrame.setVisible(true);
            }
        });

        JButton exit = new JButton("Exit");
        exit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        welcomeBottom.add(start);
        welcomeBottom.add(contest);
        welcomeBottom.add(exit);

        welcomeFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        welcomeFrame.setResizable(false);
        welcomeFrame.setVisible(true);
        welcomeFrame.pack();
        welcomeFrame.setLocationRelativeTo(null);
    }

    private void setup() {
        //Set up the gameFrame
        gameFrame = new JFrame("Ant Game");
        infoLabel = new JLabel("Load ant brain to get started");
        pauseButton = new JButton("Pause");
        playButton = new JButton("Play");

        //Set up the main panel
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout());
        gameFrame.add(contentPane);
        contentPane.setBorder(new EmptyBorder(0, 10, 10, 10));

        //Set up the center panel
        centerPanel = new JPanel();
        contentPane.add(centerPanel, BorderLayout.CENTER);

        //Set up the right panel
        rightPanel = new JPanel();
        contentPane.add(rightPanel, BorderLayout.EAST);
        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));
        if (contestGame) {
            contestRightPanel();
        } else {
            rightPanel.add(new JLabel(""));
        }

        //Set up the left panel
        leftPanel = new JPanel();
        contentPane.add(leftPanel, BorderLayout.WEST);
        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
        if (contestGame) {
            contestLeftPanel();
        } else {
            normalLeftPanel();
        }

        //Set up the top panel
        topPanel = new JPanel();
        contentPane.add(topPanel, BorderLayout.NORTH);
        topPanel.add(infoLabel);

        //Set up the bottom panel
        bottomPanel = new JPanel();
        contentPane.add(bottomPanel, BorderLayout.SOUTH);
        bottomPanel.setLayout(new BorderLayout());

        makeMenuBar();
        createSlider();

        gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        gameFrame.setResizable(false);
        gameFrame.setVisible(false);
        gameFrame.pack();
        gameFrame.setLocationRelativeTo(null);
    }

    private void makeMenuBar() {
        menuBar = new JMenuBar();
        gameFrame.setJMenuBar(menuBar);

        //Create the Options Menu
        JMenu optionsMenu = new JMenu("Options");
        menuBar.add(optionsMenu);

        newItem = new JMenuItem("New World");
        optionsMenu.add(newItem);
        newItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameFrame.invalidate();
                gameFrame.validate();
                gameFrame.repaint();
                System.out.println("Hit");
            }
        });
        loadItem = new JMenuItem("Load Brain");
        optionsMenu.add(loadItem);
        loadItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                final JFileChooser fc = new JFileChooser();
                int val = fc.showOpenDialog(gameFrame);
                if (val == JFileChooser.APPROVE_OPTION) {
                    try {
                        Scanner reader = new Scanner(fc.getSelectedFile());
                        playButton.setEnabled(true);
                        if(contestGame){
                            infoLabel.setText("Contest");
                        }
                        else{
                            infoLabel.setText("Normal Game");
                        }
                    } catch (FileNotFoundException ex) {
                        System.out.println("No file selected");
                    }
                }
                if (val == JFileChooser.CANCEL_OPTION) {
                    System.out.println("You pressed cancel");
                }

            }
        });

        mainItem = new JMenuItem("Main Menu");
        optionsMenu.add(mainItem);
        mainItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameFrame.dispose();
                welcomeFrame.setVisible(true);
            }
        });

        //Create the Help Menu
        JMenu helpMenu = new JMenu("Help");
        menuBar.add(helpMenu);

        rulesItem = new JMenuItem("Rules");
        helpMenu.add(rulesItem);
        rulesItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String rules = "These are the rules";
                JOptionPane.showMessageDialog(null, rules, "Rules", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        creditsItem = new JMenuItem("Credits");
        helpMenu.add(creditsItem);
        creditsItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String credits = "These are the credits";
                JOptionPane.showMessageDialog(null, credits, "Credits", JOptionPane.INFORMATION_MESSAGE);
            }
        });

    }

    private void contestRightPanel() {
        JLabel gameNo = new JLabel("<html>Game Number:<br>Number</html>");
        JLabel gamesWon = new JLabel("Games Won:");
        JLabel playerOne = new JLabel("<html>Player 1:<br>Score</html>");
        JLabel playerTwo = new JLabel("<html>Player 2:<br>Score</html>");
        rightPanel.add(gameNo);
        rightPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        rightPanel.add(gamesWon);
        rightPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        rightPanel.add(playerOne);
        rightPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        rightPanel.add(playerTwo);
        rightPanel.add(Box.createRigidArea(new Dimension(0, 30)));

    }

    private void contestLeftPanel() {
        JLabel blackScore = new JLabel("<html>Black<br>Score</html>");
        JLabel redScore = new JLabel("<html>Red<br>Score</html>");
        leftPanel.add(blackScore);
        leftPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        leftPanel.add(redScore);
    }

    private void normalLeftPanel() {
        JLabel blackScore = new JLabel("<html>Black<br>Score</html>");
        JLabel redScore = new JLabel("<html>Red<br>Score</html>");
        leftPanel.add(blackScore);
        leftPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        leftPanel.add(redScore);
    }

    private void createSlider() {
        final JLabel gamePaceLabel = new JLabel("Game Speed: 10", JLabel.LEFT);
        gamePaceLabel.setSize(200, 50);
        JSlider slider = new JSlider(JSlider.HORIZONTAL, 0, 100, 10);
        slider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                gamePaceLabel.setText("Game Speed : "
                        + ((JSlider) e.getSource()).getValue());
            }
        });
        bottomPanel.add(slider, BorderLayout.WEST);
        bottomPanel.add(gamePaceLabel, BorderLayout.SOUTH);
        JPanel actionButtons = new JPanel();

        //Create buttons
        actionButtons.setLayout(new FlowLayout());
        
        
        //Initialize play button
        try {
            Image img = ImageIO.read(getClass().getResource("resources/play.png"));
            playButton.setIcon(new ImageIcon(img));
        } catch (IOException ex) {
            Logger.getLogger(AntGameGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        playButton.setEnabled(false);
        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                playButton.setEnabled(false);
                pauseButton.setEnabled(true);
            }
        });
        actionButtons.add(playButton);

        //Initialize pause button
        try {
            Image img = ImageIO.read(getClass().getResource("resources/pause.png"));
            pauseButton.setIcon(new ImageIcon(img));
        } catch (IOException ex) {
            Logger.getLogger(AntGameGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                playButton.setEnabled(true);
                pauseButton.setEnabled(false);
            }
        });
        actionButtons.add(pauseButton);

        bottomPanel.add(actionButtons, BorderLayout.EAST);
    }
}
